/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.barmeier.nbpre.template;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

public class PalmSynergyPanelVisual extends JPanel implements DocumentListener {
    
    public static final String PROP_TEMPLATE_ID = "templateId";
    private PalmSynergyWizardPanel panel;

    public PalmSynergyPanelVisual(PalmSynergyWizardPanel panel) {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
        templateIdTextField.getDocument().addDocumentListener(this);
        icon32TextField.getDocument().addDocumentListener(this);
        icon48TextField.getDocument().addDocumentListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        templateIdLabel = new javax.swing.JLabel();
        templateIdTextField = new javax.swing.JTextField();
        icon48Label = new javax.swing.JLabel();
        icon48TextField = new javax.swing.JTextField();
        browseIco48Button = new javax.swing.JButton();
        icon32Label = new javax.swing.JLabel();
        icon32TextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        contactsCheckBox = new javax.swing.JCheckBox();
        calendarCheckBox = new javax.swing.JCheckBox();
        tasksCheckBox = new javax.swing.JCheckBox();
        memoCheckBox = new javax.swing.JCheckBox();
        messagingCheckBox = new javax.swing.JCheckBox();
        capabilitiesLabel = new javax.swing.JLabel();
        browseIco32Button = new javax.swing.JButton();

        templateIdLabel.setLabelFor(templateIdTextField);
        org.openide.awt.Mnemonics.setLocalizedText(templateIdLabel, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.templateIdLabel.text")); // NOI18N

        icon48Label.setLabelFor(icon48TextField);
        org.openide.awt.Mnemonics.setLocalizedText(icon48Label, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.icon48Label.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseIco48Button, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.browseIco48Button.text")); // NOI18N
        browseIco48Button.setActionCommand(org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.browseIco48Button.actionCommand")); // NOI18N
        browseIco48Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseIco48ButtonActionPerformed(evt);
            }
        });

        icon32Label.setLabelFor(icon32TextField);
        org.openide.awt.Mnemonics.setLocalizedText(icon32Label, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.icon32Label.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(contactsCheckBox, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.contactsCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(calendarCheckBox, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.calendarCheckBox.text")); // NOI18N
        calendarCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calendarCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(tasksCheckBox, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.tasksCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(memoCheckBox, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.memoCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(messagingCheckBox, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.messagingCheckBox.text")); // NOI18N
        messagingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagingCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contactsCheckBox)
                            .addComponent(tasksCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memoCheckBox)
                            .addComponent(calendarCheckBox)))
                    .addComponent(messagingCheckBox))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calendarCheckBox)
                    .addComponent(contactsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tasksCheckBox)
                    .addComponent(memoCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagingCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(capabilitiesLabel, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.capabilitiesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseIco32Button, org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.browseIco32Button.text")); // NOI18N
        browseIco32Button.setActionCommand(org.openide.util.NbBundle.getMessage(PalmSynergyPanelVisual.class, "PalmSynergyPanelVisual.browseIco32Button.actionCommand")); // NOI18N
        browseIco32Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseIco32ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(templateIdLabel)
                    .addComponent(icon48Label)
                    .addComponent(icon32Label)
                    .addComponent(capabilitiesLabel))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(templateIdTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(icon48TextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(icon32TextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(browseIco48Button)
                    .addComponent(browseIco32Button))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(templateIdLabel)
                    .addComponent(templateIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(icon48Label)
                    .addComponent(icon48TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseIco48Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(icon32Label)
                    .addComponent(icon32TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseIco32Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capabilitiesLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseIco48ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseIco48ButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            JFileChooser chooser = new JFileChooser();
            FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
            chooser.setDialogTitle("Select Project Location");
            chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            String path = ""; //this.projectLocationTextField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                icon48TextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
            panel.fireChangeEvent();
        }

    }//GEN-LAST:event_browseIco48ButtonActionPerformed

    private void calendarCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calendarCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calendarCheckBoxActionPerformed

    private void messagingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagingCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messagingCheckBoxActionPerformed

    private void browseIco32ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseIco32ButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_browseIco32ButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseIco32Button;
    private javax.swing.JButton browseIco48Button;
    private javax.swing.JCheckBox calendarCheckBox;
    private javax.swing.JLabel capabilitiesLabel;
    private javax.swing.JCheckBox contactsCheckBox;
    private javax.swing.JLabel icon32Label;
    private javax.swing.JTextField icon32TextField;
    private javax.swing.JLabel icon48Label;
    private javax.swing.JTextField icon48TextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox memoCheckBox;
    private javax.swing.JCheckBox messagingCheckBox;
    private javax.swing.JCheckBox tasksCheckBox;
    private javax.swing.JLabel templateIdLabel;
    private javax.swing.JTextField templateIdTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        templateIdTextField.requestFocus();
    }

    boolean valid(WizardDescriptor wizardDescriptor) {

        if (templateIdTextField.getText().length() == 0) {
            // TODO if using org.openide.dialogs >= 7.8, can use WizardDescriptor.PROP_ERROR_MESSAGE:
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    "The template id is not optional. Please use a dot notation.");
            return false; // Display name not specified
        }
        File f = FileUtil.normalizeFile(new File(icon48TextField.getText()).getAbsoluteFile());
        if (!f.isFile()) {
            String message = "Icon 48px image is not a valid filename.";
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, message);
            return false;
        }

        f = FileUtil.normalizeFile(new File(icon32TextField.getText()).getAbsoluteFile());

        if (!f.isFile()) {
            String message = "Icon 32px image is not a valid filename.";
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, message);
            return false;
        }

        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "");
        return true;
    }

    String getText(String text) {
        if (text==null) {
            return "";
        }
        else {
            return text;
        }
    }
    
    Boolean getBool(Boolean value) {
        if (value==null) {
            return false;
        }
        else {
            return value;
        }
    }
    
    void store(WizardDescriptor d) {
        String templateId = templateIdTextField.getText().trim();
        String icon48 = icon48TextField.getText().trim();
        String icon32 = icon32TextField.getText().trim();
        Boolean contactCaps = contactsCheckBox.isSelected();
        Boolean calendarCaps = calendarCheckBox.isSelected();
        Boolean tasksCaps = tasksCheckBox.isSelected();
        Boolean memoCaps = memoCheckBox.isSelected();
        Boolean messagingCaps = messagingCheckBox.isSelected();

        d.putProperty("templateId", templateId);
        d.putProperty("icon48", icon48);
        d.putProperty("icon32", icon32);
        d.putProperty("contactCaps", contactCaps);
        d.putProperty("calendarCaps", calendarCaps);
        d.putProperty("tasksCaps", tasksCaps);
        d.putProperty("memoCaps", memoCaps);
        d.putProperty("messagingCaps", messagingCaps);
    }

    void read(WizardDescriptor settings) {
        templateIdTextField.setText(getText((String)settings.getProperty("templateId")));
        icon48TextField.setText(getText((String)settings.getProperty("icon32")));
        icon32TextField.setText(getText((String)settings.getProperty("icon48")));
        contactsCheckBox.setSelected(getBool((Boolean)settings.getProperty("contactCaps")));
        calendarCheckBox.setSelected(getBool((Boolean)settings.getProperty("calendarCaps")));
        tasksCheckBox.setSelected(getBool((Boolean)settings.getProperty("tasksCaps")));
        memoCheckBox.setSelected(getBool((Boolean)settings.getProperty("memoCaps")));
        messagingCheckBox.setSelected(getBool((Boolean)settings.getProperty("messagingCaps")));
    }

    void validate(WizardDescriptor d) throws WizardValidationException {
        System.out.println("test");
    }

    // Implementation of DocumentListener --------------------------------------
    @Override
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.templateIdTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_TEMPLATE_ID, null, this.templateIdTextField.getText());
        }
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.templateIdTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_TEMPLATE_ID, null, this.templateIdTextField.getText());
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.templateIdTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_TEMPLATE_ID, null, this.templateIdTextField.getText());
        }
    }

    /** Handles changes in the Project name and project directory, */
    private void updateTexts(DocumentEvent e) {

//        Document doc = e.getDocument();

//        if (doc == templateIdTextField.getDocument() || doc == icon48TextField.getDocument()) {
//            // Change in the project name
//
//            String  = templateIdTextField.getText();
//            String projectFolder = icon48TextField.getText();
//
//
//
//        }
        panel.fireChangeEvent(); // Notify that the panel changed
    }
    
}
